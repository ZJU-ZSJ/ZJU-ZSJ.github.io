<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu chia</title>
    <url>/2021/04/30/Ubuntu-chia/</url>
    <content><![CDATA[<blockquote>
<p>收费提供chia技术支持（linux、集群等）</p>
</blockquote>
<h1 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h1><p>机械盘（农田目标盘）前期处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l	<span class="comment">#查看磁盘信息</span></span><br><span class="line">sudo mkfs.ext4 -m 0 -T largefile4 -L &lt;drivename&gt; /dev/sda	<span class="comment">#格式化机械盘(ext4)</span></span><br><span class="line">sudo mkfs.exfat -n LABEL /dev/sda	<span class="comment">#格式化机械盘(exfat)</span></span><br><span class="line">mkdir /mnt/hdd	<span class="comment">#创建机械盘挂载目录</span></span><br><span class="line">mount /dev/sda /mnt/hdd	<span class="comment">#挂载机械盘</span></span><br></pre></td></tr></table></figure>
<p>缓存盘raid0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mdadm -C /dev/md0 /dev/sd[a,b,c] -n 3 -l 0 -c 64</span><br><span class="line">sudo mdadm -C /dev/md0 /dev/nvme[1-2]n1 -n 2 -l 0 -c 64</span><br></pre></td></tr></table></figure>
<p>固态盘（缓存盘）前期处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/nvme0n1	<span class="comment">#格式化nvme盘</span></span><br><span class="line">or</span><br><span class="line">mkfs.xfs /dev/md0	<span class="comment">#格式化raid0后的磁盘</span></span><br><span class="line">mkdir /mnt/ssd	<span class="comment">#创建缓存盘挂载路径</span></span><br><span class="line">mount -t xfs -o discard /dev/md0 /mnt/ssd	<span class="comment">#挂载缓存盘</span></span><br></pre></td></tr></table></figure>
<p>安装chia</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Checkout the source and install</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Chia-Network/chia-blockchain.git</span><br><span class="line"><span class="built_in">cd</span> chia-blockchain</span><br><span class="line"></span><br><span class="line">sh install.sh</span><br><span class="line"></span><br><span class="line">. ./activate</span><br></pre></td></tr></table></figure>
<p>编辑权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/user/chialogs</span><br><span class="line">chmod 777 /mnt/hdd</span><br><span class="line">chmod 777 /mnt/ssd</span><br></pre></td></tr></table></figure>
<p>安装<a href="https://github.com/ericaltendorf/plotman">plotman</a></p>
<ul>
<li>确保在venv环境下输入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --force-reinstall git+https://github.com/ericaltendorf/plotman@main</span><br></pre></td></tr></table></figure>
<ul>
<li>通过plotman config generate生成默认配置文件，plotman config path查看配置文件路径并修改</li>
<li>配置文件中需要注意的几个地方</li>
</ul>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<p><img src="/images/pasted-3.png" alt="upload successful"></p>
<ul>
<li>plotman interactive查看面板。只要面板一直在，plotman就会自动按照配置文件规划执行任务。</li>
</ul>
<p><img src="/images/pasted-4.png" alt="upload successful"></p>
<ul>
<li>为了能够一直挂着interactive，可以使用<a href="https://linuxize.com/post/how-to-use-linux-screen/">screen</a></li>
</ul>
<h1 id="farm"><a href="#farm" class="headerlink" title="farm"></a>farm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chia init	<span class="comment">#安装完后首次执行</span></span><br><span class="line">chia keys add	<span class="comment">#添加助记词</span></span><br><span class="line">chia start farmer	<span class="comment">#启动full-node、farmer、harvester、wallet</span></span><br><span class="line">chia wallet show	<span class="comment">#查看钱包信息</span></span><br><span class="line">chia farm summary	<span class="comment">#查看farm信息</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-5.png" alt="upload successful"></p>
<p>其余命令可在<a href="https://link.zhihu.com/?target=https://github.com/Chia-Network/chia-blockchain/wiki/CLI-Commands-Reference">官方文档</a>查找</p>
]]></content>
      <categories>
        <category>chia</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>chia</tag>
        <tag>linux</tag>
        <tag>nvme</tag>
      </tags>
  </entry>
  <entry>
    <title>chia-plot docker使用</title>
    <url>/2021/05/08/chia-plot-docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>收费提供chia技术支持（linux、集群等）</p>
</blockquote>
<p><a href="https://github.com/ZJU-ZSJ/chia-plot">github仓库</a></p>
<p><a href="https://hub.docker.com/r/zsj6166/chia-plot">dockerhub仓库</a></p>
<p><a href="https://github.com/swar/Swar-Chia-Plot-Manager">Swar-Chia-Plot-Manager</a></p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>为了方便在linux上部署，根据官方docker做了个简易封装。首先需要对docker有一定理解，没有的话建议先去补课。</p>
<ul>
<li><p>假设已经对缓存盘以及目标盘做好格式化并且挂载完毕。缓存盘位置<code>/mnt/ssd</code>，目标盘位置<code>/mnt/hdd</code>。</p>
</li>
<li><p>编辑自己的plot-manager配置，<a href="https://github.com/swar/Swar-Chia-Plot-Manager/blob/main/config.yaml.default">默认配置</a>自取。主要编辑缓存盘，目标盘以及p盘配置。</p>
</li>
<li><p>准备好后启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run </span><br><span class="line">    --name chia-plot </span><br><span class="line">    -v /root/chia-plot-manager/config.yaml:/chia-blockchain/plot-manager/config.yaml <span class="comment">#plot-manager目录</span></span><br><span class="line">    -v /mnt/ssd:/share/tmp      <span class="comment">#缓存盘目录</span></span><br><span class="line">    -v /mnt/hdd:/share/dst      <span class="comment">#目标盘目录</span></span><br><span class="line">    -v /root/chia-plot-manager/chia-test/<span class="built_in">log</span>:/root/logs/plot-manager    <span class="comment">#plot-manager日志目录</span></span><br><span class="line">    -e TZ=<span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    -d zsj6166/chia-plot</span><br></pre></td></tr></table></figure></li>
</ul>
<p>不出意外的话docker就启动起来了。</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>添加助记词：<code>docker exec -it chia-plot venv/bin/chia keys add [助记词]</code></li>
<li>启动full-node、farmer、harvester、wallet：<code>docker exec -it chia-plot venv/bin/chia start farmer</code></li>
<li>查看钱包：<code>docker exec -it chia-plot venv/bin/chia wallet show</code></li>
<li>查看farm信息：<code>docker exec -it chia-plot venv/bin/chia farm summary</code></li>
<li>启动plot-manager管理p盘：<code>docker exec -it chia-plot bash -c &quot;cd plot-manager &amp;&amp; ../venv/bin/python manager.py start&quot;</code></li>
<li>查看plot-manager面板：<code>docker exec -it chia-plot bash -c &quot;cd plot-manager &amp;&amp; ../venv/bin/python manager.py view&quot;</code></li>
</ul>
<p>建议还是只用来p盘，farm放在docker以外。</p>
]]></content>
      <categories>
        <category>chia</category>
      </categories>
      <tags>
        <tag>chia</tag>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo配置优先级</title>
    <url>/2021/05/05/dubbo%E9%85%8D%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>dubbo有多种配置方法，有时候会出现消费者和提供者配置同一字段的情况。这种情况下需要注意配置的优先级。以下为谷歌查询到的说法，在此记录一下。</p>
<blockquote>
<p>dubbo服务超时时间有xml和注解两种方式进行实现配置超时功能。在配置范围上分为全部超时配置、接口类上超时配置、以及接口方法上超时配置。同类型上的配置消费端优先提供着端，靠近原则方法配置优先于接口类全局配置优先级最低。所以dubbo的超时时间优先级为：消费者Method&gt;提供者method&gt;消费者Reference&gt;提供者Service&gt;消费者全局配置provider&gt;提供者全局配置consumer。</p>
</blockquote>
]]></content>
      <categories>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
        <tag>xml</tag>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next增加评论系统</title>
    <url>/2021/05/05/hexo-next%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>由于hexo是纯静态web。评论系统只能依靠第三方服务。目前可选的有disqus、Valine 和 gitment等。</p>
<p>个人更加喜欢使用Valine。配置简单，支持 MarkDown 语法，无需科学上网，界面简洁明了，游客评论也无需登录。</p>
<h4 id="配置leanCloud"><a href="#配置leanCloud" class="headerlink" title="配置leanCloud"></a>配置leanCloud</h4><p>首先注册<a href="https://leancloud.cn/dashboard/login.html#/signin">leanCloud</a>（需要实名制+验证邮箱）</p>
<p>注册后在应用界面新建应用，选择开发版即可。创建后获得appKey和appId。</p>
<h4 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h4><p>这里使用的是next主题，其他主题应该有所不同。</p>
<p>在主题配置文件<code>_config.yaml</code>中找到valine，填入appid和appkey，其余默认即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>

<p>重新发布hexo</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>leanCloud</tag>
        <tag>valine</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用chiadog监控chia</title>
    <url>/2021/05/07/%E4%BD%BF%E7%94%A8chiadog%E7%9B%91%E6%8E%A7chia/</url>
    <content><![CDATA[<blockquote>
<p>收费提供chia技术支持（linux、集群等）</p>
</blockquote>
<p>无意中发现有人做了个chia监控的项目：<a href="https://github.com/martomi/chiadog">chiadog</a>，并且有<a href="https://hub.docker.com/r/artjacobson/chiadog-docker">docker版</a>。</p>
<p>原理只是监控分析chia的日志，因此不会对p盘和farm造成任何影响，windows应该也可以用。建议用docker部署。</p>
<h4 id="修改chia日志等级"><a href="#修改chia日志等级" class="headerlink" title="修改chia日志等级"></a>修改chia日志等级</h4><p>chia的日志输出默认是debug等级，信息较少，需要修改成INFO才能提供给chiadog分析。linux下的目录是<code>~/.chia/mainnet/config/config.yaml</code>,windows自行查找一下。将<code>log_level: DEBUG</code>改成<code>log_level: INFO</code>。然后重启chia服务，注意p盘进度会丢失。</p>
<h4 id="创建chiadog配置文件"><a href="#创建chiadog配置文件" class="headerlink" title="创建chiadog配置文件"></a>创建chiadog配置文件</h4><p>作者提供了配置文件的样例，我们需要改成自己的才可以使用。需要注意的有以下几个地方。</p>
<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p>time_of_day设置了日报的发送时间。chiadog提供了多种消息提醒方式。这里我用telegram，使用smtp发邮件也不错。<code>~/.chia/mainnet/log/debug.log</code>是chia日志的路径，一般不用修改，创建docker时映射进去就可以。</p>
<p>到此为止做好了启动docker的准备</p>
<ul>
<li>chiadog配置目录    ~/docker/config/chiadog/config.yaml</li>
<li>chia日志目录    ~/.chia/mainnet/log/debug.log</li>
</ul>
<h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name chiadog -v /root/docker/config/chiadog:/root/.chiadog -v /root/.chia/mainnet/<span class="built_in">log</span>:/root/.chia/mainnet/<span class="built_in">log</span>:ro -e config_dir=<span class="string">&quot;/root/.chiadog/config.yaml&quot;</span> -e TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> -d artjacobson/chiadog-docker:latest</span><br></pre></td></tr></table></figure>

<p><code>:ro</code>代表只读，防止对宿主机日志文件造成影响。</p>
<p>不出意外的话chiadog已经运行起来了，可以在telegram或者邮件中收到提示。</p>
<p><img src="/images/pasted-7.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>chia</category>
      </categories>
      <tags>
        <tag>chia</tag>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu CPU睿频 性能模式设置</title>
    <url>/2021/05/13/Ubuntu-CPU%E7%9D%BF%E9%A2%91-%E6%80%A7%E8%83%BD%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>查看当前睿频情况(0:enable 1:disable)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;intel_pstate&#x2F;no_turbo</span><br></pre></td></tr></table></figure>

<p>cpu工作模式，powersave代表省电模式，performance代表性能模式。</p>
<p>查看当前策略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu*&#x2F;cpufreq&#x2F;scaling_governor</span><br></pre></td></tr></table></figure>

<p>更改为性能模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cpupower -c all frequency-set -g performance</span><br></pre></td></tr></table></figure>

<p>查看当前频率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch -n 0 &quot;cat &#x2F;proc&#x2F;cpuinfo | grep -i mhz&quot;</span><br></pre></td></tr></table></figure>

<p>设置开机自动设置性能模式</p>
<p>安装sysfsutils</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sysfsutils</span><br></pre></td></tr></table></figure>

<p>编辑/etc/sysfs.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor &#x3D; performance</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下chia解决同步节点问题（也不一定）</title>
    <url>/2021/05/18/linux%E4%B8%8Bchia%E8%A7%A3%E5%86%B3%E5%90%8C%E6%AD%A5%E8%8A%82%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%88%E4%B9%9F%E4%B8%8D%E4%B8%80%E5%AE%9A%EF%BC%89/</url>
    <content><![CDATA[<p>本质是写了一个python脚本去爬取某个网站的节点并自动加到chia中。直接上代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> subprocess,json</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">chia_path = <span class="string">&#x27;/root/chia-blockchain/venv/bin/chia&#x27;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;https://chia.powerlayout.com/nodes&quot;</span>)</span><br><span class="line">node_info = json.loads(r.content)[<span class="string">&#x27;nodes&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> node_info:</span><br><span class="line">    ip = i[<span class="string">&quot;ip&quot;</span>]</span><br><span class="line">    port = i[<span class="string">&quot;port&quot;</span>]</span><br><span class="line">    node = ip + <span class="string">&quot;:&quot;</span> + port</span><br><span class="line">    p = subprocess.Popen(chia_path + <span class="string">&quot; show -a &quot;</span> + node, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><code>chia_path</code>自行修改成安装位置，用crontab挂上定时任务即可。动手能力强的可以移植到windows，其实差不多。</p>
]]></content>
      <tags>
        <tag>chia</tag>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>通过springboot后端下载文件</title>
    <url>/2021/07/06/springboot%E5%90%8E%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>需求是通过springboot后端将hdfs上的日志文件下载下来。hdfs中的文件内容通过cat获取，较为简单。主要记录一下如何将文件下载下来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/download&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadLog</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=a.txt&quot;</span>);</span><br><span class="line">        String content = [日志内容];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream os = response.getOutputStream();</span><br><span class="line">            os.write(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT挂载群晖nfs</title>
    <url>/2021/07/06/OpenWRT%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96nfs/</url>
    <content><![CDATA[<p>esxi上虚拟了esir大佬的OpenWRT，自带的SMB挂载怎么都挂不上群晖的共享盘。最后琢磨出来改用nfs挂载。</p>
<p>需要<code>nfs-utils</code>和<code>nfs-utils-libs</code>两个包。</p>
<p>群晖nfs打开4.0支持，OpenWRT开机脚本新增一行。（假设群晖ip是192.168.31.100）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount.nfs -w 192.168.31.100:/volume3/OpenWRT /mnt/openwrt/ -o nolock</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>openwrt</tag>
        <tag>esxi</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT使用virtualhere实现远程usb</title>
    <url>/2021/10/08/OpenWRT%E4%BD%BF%E7%94%A8virtualhere%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8Busb/</url>
    <content><![CDATA[<p>最近为了扫描胶片新买了台扫描仪，但是卧室里电脑旁没地方放，而且猫毛多灰尘多。刚好客厅设备架子上有空，就想着能不能通过网络传递usb设备，这样就能每次放完胶片回卧室慢慢扫，也不用怕灰尘多。在网上搜索了一下，发现有个叫virtualhere的软件刚好能够实现我的需求。</p>
<p>virtualhere官网：<a href="https://www.virtualhere.com/">https://www.virtualhere.com/</a></p>
<p>简单翻看了一下官网，virtualhere支持多种架构的cpu，理论上全平台可用，并且还对扫描仪等设备进行了专门适配，更牛逼的是这个团队时至今日还在继续保持更新。</p>
<p>刚开始打算直接试试群晖上的virtualhere套件，直接搜索就能安装。安装完发现居然只能试用10天，10天后需要支付49$购买许可，并且与服务端设备绑定，有点小贵。多加了解之后发现virtualhere在树莓派等设备上可以直接免费使用，支持一个usb设备，这已经足够我使用了。于是我将esxi的主板usb直通给了openwrt，在openwrt上安装x86版本的virtualhere（二进制文件可以直接在官网下载）。设置开机启动，一次成功。使用起来和直连usb没有任何区别。</p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p><img src="/images/pasted-9.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nas</tag>
        <tag>OpenWRT</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖升级6.2.3后核显失效</title>
    <url>/2021/10/08/%E7%BE%A4%E6%99%96%E5%8D%87%E7%BA%A76-2-3%E5%90%8E%E6%A0%B8%E6%98%BE%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>近期将esxi中虚拟的黑群晖从6.2.1升级到6.2.3。升级后发现<code>ls /dev/dri</code>看不到核显。查了一下原来是引导不支持，好吧，懒得换引导只能每次都手动替换一下补丁了。</p>
<p>由于是虚拟的群晖，不太方便直接拿到启动盘。其实有方法ssh到群晖后可以直接挂载启动盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;dev</span><br><span class="line">mkdir &#x2F;mnt&#x2F;boot</span><br><span class="line">mount -t vfat synoboot2 &#x2F;mnt&#x2F;boot	#这里synoboot2可能每个人不一样，有的人是1有的人是2，总之在这一步将启动盘挂载到&#x2F;mnt&#x2F;boot</span><br><span class="line">cd &#x2F;mnt&#x2F;boot</span><br><span class="line"></span><br><span class="line">进入目录后替换进去补丁，可以直接下载或者从群晖存储中拖</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nas</category>
      </categories>
      <tags>
        <tag>nas</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
</search>
